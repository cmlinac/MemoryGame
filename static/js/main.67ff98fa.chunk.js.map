{"version":3,"sources":["components/Picture/index.js","components/Header/index.js","components/Footer/index.js","components/Logo/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Picture","props","className","src","onClick","value","alt","name","style","backgroundColor","Header","children","score","highScore","Footer","Logo","Game","handleClick","i","console","log","message","pictures","state","isClicked","setState","restartGame","length","shuffle","initializePictures","originalPictures","forEach","element","this","map","pic","idx","key","role","aria-label","j","Math","floor","random","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k3DAWeA,MARf,SAAiBC,GACf,OAEI,yBAAKC,UAAU,uBAAuBC,IAAKF,EAAME,IAAKC,QAAS,kBAAKH,EAAMG,QAAQH,EAAMI,QAAQC,IAAKL,EAAMM,KAAMC,MAAO,CAACC,gBAAiBR,EAAMM,S,qBCWvIG,MAdf,SAAgBT,GACd,OACE,6BACE,yBAAKC,UAAU,0BACVD,EAAMU,UAEX,yBAAKT,UAAU,oBACb,qCAAWD,EAAMW,OACjB,0CAAgBX,EAAMY,YAExB,+B,MCNSC,MAJf,SAAgBb,GACd,OAAQ,yBAAKC,UAAU,eAAc,6BAAMD,EAAMU,WCMpCI,G,MAPF,WACX,OACA,yBAAKb,UAAU,OACX,yBAAKA,UAAU,iBAAiBI,IAAI,aAAaH,IAAI,0FC+F5Ca,E,YA3Fb,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KAkBRgB,YAAc,SAACC,GACbC,QAAQC,IAAIF,GAEZ,IACIG,EADEC,EAAW,EAAKC,MAAMD,SAI5B,GAAIA,EAASJ,GAAGM,UACdH,EAAO,8BAA0BC,EAASJ,GAAGX,KAAtC,gBACP,EAAKkB,SAAS,CAACJ,YACf,EAAKK,kBAEA,CAEL,IAAMd,EAAQ,EAAKW,MAAMX,MAAQ,EAG7BA,IAAUU,EAASK,QACrBN,EAAU,wBACV,EAAKI,SAAS,CAACJ,YACf,EAAKK,gBAKLJ,EAASJ,GAAGM,WAAY,EACxB,EAAKI,QAAQN,GACbD,EAAU,qCACV,EAAKI,SAAS,CACZH,SAAUA,EACVV,MAAOA,EAEPC,UAAWD,EAAQ,EAAKW,MAAMV,UAAYD,EAAQ,EAAKW,MAAMV,UAC7DQ,QAASA,OApDE,EAkFnBK,YAAc,WACZ,EAAKD,SAAS,CAEZH,SAAU,EAAKO,qBACfjB,MAAO,KApFT,EAAKW,MAAQ,CACXD,SAAU,EAAKO,qBACfhB,UAAW,EACXD,MAAO,EACPS,QAAS,iEANM,E,kFAYjB,IAAMC,EAAWQ,EAGjB,OAFAR,EAASS,SAAQ,SAAAC,GAAO,OAAIA,EAAQR,WAAY,KAChDL,QAAQC,IAAIE,GACLA,I,+BA2CC,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKpB,UAAU,iCACb,kBAAC,EAAD,CAAQU,MAAOqB,KAAKV,MAAMX,MAAOC,UAAWoB,KAAKV,MAAMV,WAAYoB,KAAKV,MAAMF,SAC9E,yBAAKnB,UAAU,cACZ+B,KAAKV,MAAMD,SAASY,KAAI,SAACC,EAAKC,GAAN,OAAc,kBAAC,EAAD,CAASjC,IAAKgC,EAAIhC,IAAKI,KAAM4B,EAAI5B,KAAMF,MAAO+B,EAAKC,IAAKF,EAAI5B,KAAMH,QAAS,kBAAM,EAAKa,YAAYmB,UAE3I,kBAAC,EAAD,KAAQ,0BAAME,KAAK,MAAMC,aAAW,aAA5B,qB,8BAORjB,GACN,IAAK,IAAIJ,EAAII,EAASK,OAAS,EAAGT,GAAK,EAAGA,IAAK,CAC7C,IAAIsB,EAAIC,KAAKC,MAAMD,KAAKE,UAAYzB,EAAI,IADK,EAGhB,CAACI,EAASkB,GAAIlB,EAASJ,IAAnDI,EAASJ,GAHmC,KAG/BI,EAASkB,GAHsB,U,GA5EhCI,IAAMC,WCCVC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.67ff98fa.chunk.js","sourcesContent":["import React from 'react';\nimport './Picture.css'\n\nfunction Picture(props) {\n  return (\n    //<div className=\"picture-container rounded\">\n      <img className=\"game-picture rounded\" src={props.src} onClick={() =>props.onClick(props.value)} alt={props.name} style={{backgroundColor: props.name}}/>\n    //</div>\n  );\n}\n\nexport default Picture;","import React from 'react';\nimport './Header.css';\n\nfunction Header(props) {\n  return ( \n    <div>\n      <div className=\"instructions text-left\">\n          {props.children}\n      </div>\n      <div className=\"score text-right\">\n        <p>Score: {props.score}</p>\n        <p>High Score: {props.highScore}</p>\n      </div>  \n      <hr/>\n    </div>);\n}\n \nexport default Header;","import React from 'react';\nimport './Footer.css';\n\nfunction Footer(props) {\n  return (<div className=\"footer-text\"><hr/>{props.children}</div>);\n}\n \nexport default Footer;","import React from 'react';\nimport './Logo.css'\n\nconst Logo = () => {\n  return ( \n  <div className=\"row\">\n      <img className=\"logo img-fluid\" alt=\"psych logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/b/b3/Psych_logo_season_1_colors.png\"/>\n  </div> );\n}\n \nexport default Logo;","import React from 'react';\nimport Picture from '../Picture';\nimport './Game.css';\nimport originalPictures from '../../pictures.json';\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\nimport Logo from '../Logo';\n\n// the main component, keeps track of game state and renders most components\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pictures: this.initializePictures(),\n      highScore: 0,\n      score: 0,\n      message: \"Can you click on all 9 characters without clicking one twice?\"\n    };\n  }\n\n  // load stored pictures and add isClicked = false to each picture \n  initializePictures() {\n    const pictures = originalPictures;\n    pictures.forEach(element => element.isClicked = false);\n    console.log(pictures);\n    return pictures;\n  }\n\n  // Game Logic\n  handleClick = (i) => {\n    console.log(i);\n    // check if picture was already clicked\n    const pictures = this.state.pictures;\n    let message;\n\n    // if it was clicked, user loses and game restarts\n    if (pictures[i].isClicked) {\n      message = `You already clicked ${pictures[i].name}, c'mon son!`;\n      this.setState({message});\n      this.restartGame();\n\n    } else {\n      // if it isn't, increase their score \n      const score = this.state.score + 1;\n\n      // if the user's score is equal to the number of pictures, they win and the game restarts\n      if (score === pictures.length) {\n        message = \"You won! I hear that.\";\n        this.setState({message});\n        this.restartGame();\n\n      } else {\n        // keep the game running\n        // increase the user's score, shuffle the array and save the current state\n        pictures[i].isClicked = true;\n        this.shuffle(pictures);\n        message = \"You know that's right! Keep going.\";\n        this.setState({\n          pictures: pictures,\n          score: score,\n          // if new score > highScore, update highScore\n          highScore: score > this.state.highScore ? score : this.state.highScore,\n          message: message\n        });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Logo/>\n        <div className=\"container rounded text-center\">\n          <Header score={this.state.score} highScore={this.state.highScore}>{this.state.message}</Header>\n          <div className=\"game-board\">\n            {this.state.pictures.map((pic, idx) => <Picture src={pic.src} name={pic.name} value={idx} key={pic.name} onClick={() => this.handleClick(idx)}/>)}\n          </div>\n          <Footer><span role=\"img\" aria-label=\"pineapple\">üçç</span></Footer>\n        </div>\n      </div>\n    );\n  }\n\n  // shuffles the given array\n  shuffle(pictures) {\n    for (let i = pictures.length - 1; i >= 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      // swaps elements i and j\n      [pictures[i], pictures[j]] = [pictures[j], pictures[i]];\n    }\n  }\n\n  restartGame = () => {\n    this.setState({\n      // Game manages state of pictures\n      pictures: this.initializePictures(),\n      score: 0\n    });\n  }\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <Game/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}